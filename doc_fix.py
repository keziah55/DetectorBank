#!/usr/bin/env python3
# -*- coding: utf-8 -*-
""" doc_fix input.i -o output.i

Alter output of doxy2swig.py, so that methods documented with 
%feature("autodoc", "docstring") with override the automatically generated
docs.

doxy2swig.py takes xml generated by Doxygen and writes documentation that can
be read by SWIG. However it is sometimes necessary to override the 
automatically generated documentation with documentation that makes more sense
to the programmer (e.g. when typemaps are involved).

The code generated by doxy2swig.py uses %feature("docstring"), which means 
this documentation will be combined with any %feature("autodoc") documentation, 
i.e. Python documentation will contain both the C++ documentation and the new
Python documentation.

This program transforms %feature("docstring") into 
%feature("autodoc", "docstring") so that it can be superseded by manual 
documentation, if required.
"""

import re

def make_new_docs(infile, outfile):
    """ Transform %feature("docstring") into %feature("autodoc", "docstring")
    
    Parameters
    ----------
    * `infile` :
        .i file generated by doxy2swig
        
    * `outfile` :
        .i file to write. If None, infile will be overwritten
    """
    
    if outfile is None:
        outfile = infile
    
    doc_file = open(infile, 'r')
    
    line = ' '
    
    feature = ''
    features = []
    new_features = []
    
    while line:
        line = doc_file.readline()
        if (len(line) > 1) and (line.strip()[:8] == '%feature'):
            features.append(feature)
            feature = line
        else:
            feature += line
    
    doc_file.close()
    
    features.append(feature)
    
    autodoc = '%feature("autodoc", '
    
    for feature in features:
        if feature[:21] != '%feature("docstring")':
            new_features.append(feature)
        else:
            s = re.split('\W+\"\W+', feature[21:])
            new = '"'.join([autodoc, s[1], ')']) + s[0] + ';\n\n'
            new_features.append(new)
    
    with open(outfile, 'w') as new_doc_file:
        new_doc_file.write(''.join(new_features))
        
if __name__ == '__main__':
    
    import argparse

    desc = """Take the .i file generated by doxy2swig.py and transform 
    %feature("docstring") into %feature("autodoc", "docstring") so that 
    docstrings can be superseded by manual documentation, if required."""
        
    parser = argparse.ArgumentParser(description=desc)
                                     
    parser.add_argument('input', help='File generated by doxy2swig.py')
    
    parser.add_argument('-o','--output', help='File to be written. If None, '
                        'input file will be overwritten.')
    
    args = parser.parse_args()
    
    make_new_docs(args.input, args.output)
    